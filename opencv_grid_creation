
import cv2
import numpy as np
global hsquares
global grid_p
def get_grids(x1,x2,y1,y2):
  k1=1
  k2=hsquares
  i=0
  grid_p=list()
  while k1 <= (hsquares):
    grid_p.append(get_ratio_points(x1,x2,y1,y2,k1,k2))
    cv2.circle(img,grid_p[i],5,(0,0,255),-1)
    k1=k1+1
    k2=k2-1
    i=i+1

  
def get_ratio_points(x1,x2,y1,y2,k1,k2):
  x0 = ((x1*k2)+(x2*k1))/(k1+k2)
  y0 = ((y1*k2)+(y2*k1))/(k1+k2)
  return int(x0),int(y0)
def get_fourth_point(x1,x3,x4,y1,y3,y4):
  m1=(y1-y3)/(x1-x3)
  m2=(y4-y3)/(x4-x3)
  c1=y4-(m1*x4)
  c2=y1-(m2*x1)
  x2=(c2-c1)/(m1-m2)
  y2=(m1*x2)+c1
  return (int(x2),int(y2))
def get_grid_points(x1,x2,x3,x4,y1,y2,y3,y4):
  xa,ya = get_ratio_points(x1,x2,y1,y2,1.5,3.5)
  xb,yb = get_ratio_points(x1,x2,y1,y2,3.5,1.5)
  xc,yc = get_ratio_points(x3,x4,y3,y4,1.5,3.5)
  xd,yd = get_ratio_points(x3,x4,y3,y4,3.5,1.5)
  get_grids(int(xa),int(xc),int(ya),int(yc))
  get_grids(int(xb),int(xd),int(yb),int(yd))

img=cv2.imread("rasp/check1.jpg")

hsv=cv2.cvtColor(img,cv2.COLOR_BGR2HSV)
lower_range=np.array([30,150,150])
higher_range=np.array([50,255,255])
mask1 = cv2.inRange(hsv,lower_range,higher_range)
res = cv2.bitwise_and(img,img, mask=mask1)
ret,thrshed = cv2.threshold(cv2.cvtColor(res,cv2.COLOR_BGR2GRAY),3,255,cv2.THRESH_BINARY)
image,contours,hier = cv2.findContours(thrshed,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)
hsquares = 4
grid_p = list()
areas = [cv2.contourArea(c) for c in contours]
max_index = np.argmax(areas)
cnt=contours[max_index]
rect =  cv2.minAreaRect(cnt)
box = cv2.boxPoints(rect)
box = np.int0(box)
#print(box)
x2,y2 = get_fourth_point(810,766,1792,279,1773,1803)
print(x2,y2)
cv2.drawContours(img,[box],-1,(0,0,255),2)
get_grid_points(810,1836,766,1792,279,309,1773,1803)
#cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,0),2)
#print(box)
roi=cv2.resize(img,(900,900))
cv2.imshow("frame",roi)

cv2.waitKey(0)
